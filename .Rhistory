data <- as_tibble(data)
transdata <- select(data, Transaction, Menu)
classdata <- select(data, Transaction, Class)
catdata <- select(data, Transaction, Category)
View(classdata)
Agg.RTxn <- split(classdata$Class ,classdata$Transaction)
class(Agg.RTxn)
## To see specific row number transaction
Agg.RTxn [35]
## logic to remove duplicate items from the list
Agg.RTxn_DD <- list()
for (i in 1:length(Agg.RTxn)) {
Agg.RTxn_DD[[i]] <- as.character(Agg.RTxn[[i]][!duplicated(Agg.RTxn[[i]])])
}
## converting transaction items from list format to transaction format
Txns <- as(Agg.RTxn_DD, "transactions")
summary(Txns)
inspect(Txns[1:5])
freq <- itemFrequency(Txns)
freq <- freq[order(-freq)]
freq["Edamame"]
freq["KM Dinner"]
qplot(freq)
barplot(freq[1:10], horiz = TRUE, axisnames = TRUE, las=1, cex.names=0.5)
itemFrequencyPlot(Txns, support = 0.1)
itemFrequencyPlot(Txns, topN = 10)
itemFrequencyPlot(Txns, topN = 20)
arules1 <- apriori(data = Txns, parameter=list(supp= 0.3, conf = 0.5, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.05, confidence = 0.1, minlen = 2))
inspect(sort(arules2,by="confidence"))
ibrary(RColorBrewer)
library(RColorBrewer)
plot ( arules2,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
)
subrules2 <- head(sort(arules2, by="support"), 10)
plot(subrules2, method = "graph" )
subrules2 <- head(sort(arules2, by="confidence"), 20)
plot(subrules2, method = "graph" )
rules_df <- as(arules2,"data.frame")
rules_df$lhs_support <- rules_df$support/ rules_df$confidence;
rules_df$rhs_support <- rules_df$confidence / rules_df$lift;
View(rules_df)
summary(Txns)
#setwd("C:\Users\suping\Desktop\New folder\dsba-master\dsba-master")
library(lubridate)
library(tidyverse)
library(readxl)
library(dplyr)
library(arulesViz)
library(arules)
library(lattice)
library(DataExplorer)
data <- read_xlsx("sole.xlsx")
setwd("C:/Users/Ping/Documents/GitHub/dsba")
library(lubridate)
library(tidyverse)
library(readxl)
library(dplyr)
library(arulesViz)
library(arules)
library(lattice)
library(DataExplorer)
data <- read_xlsx("allnomods.xlsx")
nrow(data)
str(data)
str(data)
summary(data)
data$Date <- ymd(data$Date)
data$Day <- wday(data$Date, label = T)
head(data)
new_vars <- c("Date","Transaction","Row", "Category", "Class", "Code","Menu","Qty","Price","Cost","Day")
colnames(data) <- new_vars
summary(data)
# arrange columns
colnames(data)
data <- data[, c(1,11,2,3,4,5,6,7,8,9,10)]
summary(data)
# Set factors
cols <- c("Date","Transaction","Category", "Class","Menu")
data <- data %>% mutate_at(cols, factor)
head(data)
quantile(data$Price,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1)) # significant difference in 0% and 1%
#filter data for rules
data <- as_tibble(data)
transdata <- select(data, Transaction, Menu)
new_vars <- c("Date","Transaction","Category", "Class", "ID","Menu","Qty","Price","Cost","Day","Row")
colnames(data) <- new_vars
summary(data)
new_vars <- c("Date","Transaction","Category", "Class", "ID","Menu","Qty","Price","Cost","Row","Day")
colnames(data) <- new_vars
summary(data)
setwd("C:/Users/Ping/Documents/GitHub/dsba")
library(lubridate)
library(tidyverse)
library(readxl)
library(dplyr)
library(arulesViz)
library(arules)
library(lattice)
library(DataExplorer)
data <- read_xlsx("allnomods.xlsx")
nrow(data)
str(data)
summary(data)
data$Date <- ymd(data$Date)
data$Day <- wday(data$Date, label = T)
head(data)
new_vars <- c("Date","Transaction","Category", "Class", "ID","Menu","Qty","Price","Cost","Row","Day")
colnames(data) <- new_vars
summary(data)
colnames(data)
data <- data[, c(1,11,2,3,4,5,6,7,8,9,10)]
summary(data)
# Set factors
cols <- c("Date","Transaction","Category", "Class","Menu")
data <- data %>% mutate_at(cols, factor)
head(data)
quantile(data$Price,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1)) # significant difference in 0% and 1%
#filter data for rules
data <- as_tibble(data)
transdata <- select(data, Transaction, Menu)
attach(data)
plot(Date)
plot(Day)
plot(Transaction)
plot(Category)
plot(ID)
plot(Menu)
plot(Qty)
boxplot(Price)
qplot(Cost)
plot_histogram(data, title ="Univariate Analysis for Continuous Data")
plot_bar(data, title ="Univariate Analysis for Factored Data")
ggplot(data = data) +
geom_bar(mapping = aes(x = Category, fill = Day), position = "dodge")
ggplot(data = data) +
geom_bar(mapping = aes(x = Transaction, fill = Day), position = "dodge")
attach(data)
plot(Date)
plot(Day)
plot(Transaction)
plot(Category)
plot(ID)
plot(Menu)
plot(Qty)
boxplot(Price)
qplot(Cost)
plot_histogram(data, title ="Univariate Analysis for Continuous Data")
plot_bar(data, title ="Univariate Analysis for Factored Data")
ggplot(data = data) +
geom_bar(mapping = aes(x = Category, fill = Day), position = "dodge")
ggplot(data = data) +
geom_bar(mapping = aes(x = Transaction, fill = Day), position = "dodge")
ggplot(data = data) +
geom_bar(mapping = aes(x = Transaction, fill = Day), position = "dodge")
ggplot(data = data) +
geom_bar(mapping = aes(x = Day, fill = Transaction), position = "dodge")
Agg.RTxn <- split(transdata$Menu ,transdata$Transaction)
class(Agg.RTxn)
## To see specific row number transaction
Agg.RTxn [35]
## logic to remove duplicate items from the list
Agg.RTxn_DD <- list()
for (i in 1:length(Agg.RTxn)) {
Agg.RTxn_DD[[i]] <- as.character(Agg.RTxn[[i]][!duplicated(Agg.RTxn[[i]])])
}
## converting transaction items from list format to transaction format
Txns <- as(Agg.RTxn_DD, "transactions")
summary(Txns)
inspect(Txns[1:5])
freq <- itemFrequency(Txns)
freq <- freq[order(-freq)]
freq["Matcha Parfait"]
qplot(freq)
barplot(freq[1:10], horiz = TRUE, axisnames = TRUE, las=1, cex.names=0.5)
itemFrequencyPlot(Txns, support = 0.1)
itemFrequencyPlot(Txns, topN = 10)
library("arulesViz")
?apriori
arules1 <- apriori(data = Txns, parameter=list(supp= 0.3, conf = 0.5, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.3, confidence = 0.5, minlen = 2))
inspect(sort(arules2,by="confidence"))
itemFrequencyPlot(Txns, support = 0.05)
setwd("C:/Users/Ping/Documents/GitHub/dsba")
library(lubridate)
library(tidyverse)
library(readxl)
library(dplyr)
library(arulesViz)
library(arules)
library(lattice)
library(DataExplorer)
data <- read_xlsx("allnomods.xlsx")
nrow(data)
str(data)
summary(data)
data$Date <- ymd(data$Date)
data$Day <- wday(data$Date, label = T)
head(data)
new_vars <- c("Date","Transaction","Category", "Class", "ID","Menu","Qty","Price","Cost","Row","Day")
colnames(data) <- new_vars
summary(data)
# arrange columns
colnames(data)
data <- data[, c(1,11,2,3,4,5,6,7,8,9,10)]
summary(data)
# Set factors
cols <- c("Date","Transaction","Category", "Class","Menu")
data <- data %>% mutate_at(cols, factor)
head(data)
quantile(data$Price,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1)) # significant difference in 0% and 1%
#filter data for rules
data <- as_tibble(data)
transdata <- select(data, Transaction, Menu)
attach(data)
plot(Date)
plot(Day)
plot(Transaction)
plot(Category)
plot(ID)
plot(Menu)
plot(Qty)
boxplot(Price)
qplot(Cost)
plot_histogram(data, title ="Univariate Analysis for Continuous Data")
plot_bar(data, title ="Univariate Analysis for Factored Data")
ggplot(data = data) +
geom_bar(mapping = aes(x = Category, fill = Day), position = "dodge")
Agg.RTxn <- split(transdata$Menu ,transdata$Transaction)
class(Agg.RTxn)
## To see specific row number transaction
Agg.RTxn [35]
## logic to remove duplicate items from the list
Agg.RTxn_DD <- list()
for (i in 1:length(Agg.RTxn)) {
Agg.RTxn_DD[[i]] <- as.character(Agg.RTxn[[i]][!duplicated(Agg.RTxn[[i]])])
}
## converting transaction items from list format to transaction format
Txns <- as(Agg.RTxn_DD, "transactions")
summary(Txns)
inspect(Txns[1:5])
freq <- itemFrequency(Txns)
freq <- freq[order(-freq)]
freq["Matcha Parfait"]
qplot(freq)
barplot(freq[1:10], horiz = TRUE, axisnames = TRUE, las=1, cex.names=0.5)
itemFrequencyPlot(Txns, support = 0.05)
itemFrequencyPlot(Txns, topN = 10)
library("arulesViz")
?apriori
arules1 <- apriori(data = Txns, parameter=list(supp= 0.3, conf = 0.5, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.3, confidence = 0.5, minlen = 2))
inspect(sort(arules2,by="confidence"))
itemFrequencyPlot(Txns, support = 0.01)
itemFrequencyPlot(Txns, support = 0.04)
itemFrequencyPlot(Txns, topN = 10)
itemFrequencyPlot(Txns, topN = 20)
library("arulesViz")
arules1 <- apriori(data = Txns, parameter=list(supp= 0.3, conf = 0.5, minlen = 2))
summary(arules1)
arules1 <- apriori(data = Txns, parameter=list(supp= 0.05, conf = 0.05, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules1 <- apriori(data = Txns, parameter=list(supp= 0.01, conf = 0.05, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.01, confidence = 0.02, minlen = 2))
inspect(sort(arules2,by="confidence"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.01, confidence = 0.01, minlen = 2))
inspect(sort(arules2,by="confidence"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.01, confidence = 0.03, minlen = 2))
summary(arules2)
inspect(sort(arules2,by="confidence"))
library(RColorBrewer)
plot ( arules2,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
library(RColorBrewer)
```{r}
library(RColorBrewer)
plot ( arules2,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
)
subrules2 <- head(sort(arules2, by="support"), 10)
plot(subrules2, method = "graph" )
subrules2 <- head(sort(arules2, by="confidence"), 20)
plot(subrules2, method = "graph" )
plot(subrules2, method = "graph", engine = interactive )
plot(subrules2, method = "graph", engine = interactive)
plot(subrules2, method = "graph", engine = "interactive")
subrules2 <- head(sort(arules2, by="support"), 10)
plot(subrules2, method = "graph", engine = "interactive")
subrules2 <- head(sort(arules2, by="support"), 10)
plot(subrules2, method = "graph", engine = "interactive")
subrules2 <- head(sort(arules2, by="confidence"), 20)
plot(subrules2, method = "graph",  engine = "interactive")
rules_df <- as(arules2,"data.frame")
rules_df$lhs_support <- rules_df$support/ rules_df$confidence;
rules_df$rhs_support <- rules_df$confidence / rules_df$lift;
View(rules_df)
rules.tofu <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="SUN Tofu Cheesecake"),
control = list (verbose=F))
rules.tofu1 <- head(sort(rules.tofu, by="support"), 10)
plot(rules.tofu1, method = "graph")
rules.tofu1 <- head(sort(rules.tofu, by="support"), 5)
plot(rules.tofu1, method = "graph")
rules.eihire <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Eihire Aburi"),
control = list (verbose=F))
rules.eihire1 <- head(sort(rules.eihire, by="support"), 10)
plot(rules.eihire1, method = "graph")
rules.beer <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Premium Malts 380ml"),
control = list (verbose=F))
rules.beer1 <- head(sort(rules.beer, by="support"), 5)
plot(rules.beer1, method = "graph")
rules.beer1 <- head(sort(rules.beer, by="support"), 20)
plot(rules.beer1, method = "graph")
rules.edamame1 <- head(sort(rules.edamame, by="support"), 20)
plot(rules.edamame1, method = "graph")
rules.edamame <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Edamame"),
control = list (verbose=F))
rules.edamame <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Edamame"),
control = list (verbose=F))
rules.edamame1 <- head(sort(rules.edamame, by="support"), 20)
plot(rules.edamame1, method = "graph")
rules.tofu <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="SUN Tofu Cheesecake"),
control = list (verbose=F))
rules.tofu1 <- head(sort(rules.tofu, by="support"), 20)
plot(rules.tofu1, method = "graph")
rules.beer <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Premium Malts 380ml"),
control = list (verbose=F))
rules.beer1 <- head(sort(rules.beer, by="support"), 20)
plot(rules.beer1, method = "graph")
View(rules.tofu)
rules.hama <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="Hamachi Kama Yaki"),
control = list (verbose=F))
rules.hama1 <- head(sort(rules.hama, by="support"), 20)
plot(rules.hama1, method = "graph")
rules.hama <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="lhs",rhs="Hamachi Kama Yaki"),
control = list (verbose=F))
rules.hama1 <- head(sort(rules.hama, by="support"), 20)
plot(rules.hama1, method = "graph")
arules1 <- apriori(data = Txns, parameter=list(supp= 0.001, conf = 0.5, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules1 <- apriori(data = Txns, parameter=list(supp= 0.005, conf = 0.5, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules1 <- apriori(data = Txns, parameter=list(supp= 0.001, conf = 0.7, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
arules2 <- apriori(data = Txns, parameter = list(support = 0.01, confidence = 0.3, minlen = 2))
summary(arules2)
inspect(sort(arules2,by="confidence"))
library(RColorBrewer)
plot ( arules1,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
)
subrules2 <- head(sort(arules1, by="support"), 10)
plot(subrules2, method = "graph", engine = "interactive")
plot ( arules2,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
)
arules1 <- apriori(data = Txns, parameter=list(supp= 0.001, conf = 0.6, minlen = 2))
summary(arules1)
inspect(sort(arules1,by="support"))
#Generating Rules - There are three parameters controlling the number of rules to be generated viz. Support and Confidence. Another parameter Lift is generated using Support and Confidence and is one of the major parameters to filter the generated rules. Support is an indication of how frequently the itemset appears in the dataset. Consider only the two transactions from the above output. The support of the item citrus fruit is 1/2 as it appears in only 1 out of the two transactions.Confidence is an indication of how often the rule has been found to be true. We will discuss more about confidence after generating the rules.
library(RColorBrewer)
plot ( arules1,control=list(
col = brewer.pal(11,"Spectral")
),
main="Association Rules Plot"
)
subrules1 <- head(sort(arules1, by="support"), 20)
plot(subrules1, method = "graph", engine = "interactive")
subrules2 <- head(sort(arules2, by="confidence"), 20)
plot(subrules2, method = "graph",  engine = "interactive")
rules_df <- as(arules1,"data.frame")
rules_df$lhs_support <- rules_df$support/ rules_df$confidence;
rules_df$rhs_support <- rules_df$confidence / rules_df$lift;
View(rules_df)
rules.tofu <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="SUN Tofu Cheesecake"),
control = list (verbose=F))
rules.tofu1 <- head(sort(rules.tofu, by="support"), 20)
plot(rules.tofu1, method = "graph")
View(data)
head(data)
which.max(data$Menu)
which.min(data$Menu)
summary(data$Menu)
View(data$Menu)
table(data$Menu)
menuqty <- table(data$Menu)
arrange(menuqty, desc)
menuqty[order(menuqty)]
menuqty[-order(menuqty)]
menuqty[order(-menuqty)]
quantile(data$Price,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1)) # significant difference in 0% and 1%
menuqty[order(-menuqty), 20]
menuqty[order(-menuqty),], 20
menuqty[order(-menuqty),]
menuqty[order(-menuqty)]
topn <- (menuqty[order(-menuqty)], n =50)
menuqty[order(-menuqty)], n =50)
menuqty[order(-menuqty)], n =50
head(menuqty)
head(menuqty[order(menuqty, decreasing = T),], n = 100)
head(menuqty[order(menuqty, decreasing = T),], n = 50)
menu100 <- as(menuqty,"data.frame")
as.data.frame(menuqty)
menu100 <- head(menuqty[order(menuqty, decreasing = T),], n = 50)
menu100 <- as.data.frame(menuqty)
View(menu100)
plot(menu100)
head(menu100[order(menu100$Freq, decreasing= T),], n = 100)
head(menu100[order(menu100$Freq, decreasing= T),], n = 50)
menu50 <- head(menu100[order(menu100$Freq, decreasing= T),], n = 50)
summary(menu50)
menu50 <- head(menu100[order(menu100$Freq, decreasing= T),], n = 50)
View(menu50)
### support items: what they purchase before mini chawan - lhs
rules.tofu <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="lhs",rhs="[S] Mini Chawan"),
control = list (verbose=F))
### support items: what they purchase before mini chawan - lhs
rules.minichawan <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="lhs",rhs="[S] Mini Chawan"),
control = list (verbose=F))
rules.minichawan <- head(sort(rules.minichawan, by="support"), 20)
plot(rules.minichawan, method = "graph")
rules.minichawan <- head(sort(rules.minichawan, by="confidence"), 20)
plot(rules.minichawan, method = "graph")
rules.minichawan1 <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="[S] Mini Chawan"),
control = list (verbose=F))
rules.minichawan1 <- head(sort(rules.minichawan1, by="confidence"), 20)
plot(rules.minichawan1, method = "graph")
rules.beefnabe <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="[DS]Beef Nabe"),
control = list (verbose=F))
rules.beefnabe <- head(sort(rules.beefnabe, by="confidence"), 20)
plot(rules.beefnabe, method = "graph")
### support items: what they purchase after [KL]Chicken Teriyaki Kobachi- rhs
rules.kobachi <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="[KL]Chicken Teriyaki Kobachi"),
control = list (verbose=F))
plot(rules.kobachi, method = "graph")
rules.hama <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.05, minlen = 2),
appearance = list (default="lhs",rhs="Hamachi Kama Yaki"),
control = list (verbose=F))
### support items: what they purchase after [KL]Chicken Teriyaki Kobachi- rhs
rules.kobachi <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.05, minlen = 2),
appearance = list (default="rhs",lhs="[KL]Chicken Teriyaki Kobachi"),
control = list (verbose=F))
rules.kobachi <- head(sort(rules.kobachi, by="confidence"), 20)
plot(rules.kobachi, method = "graph")
rules.kaisenkm <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="[SL]Aburi Kaisen KM"),
control = list (verbose=F))
rules.kaisenkm <- head(sort(rules.kaisenkm, by="confidence"), 20)
plot(rules.kaisenkm, method = "graph")
rules.kaisenkm <- apriori (data=Agg.RTxn_DD,
parameter=list (supp=0.001,conf = 0.01, minlen = 2),
appearance = list (default="rhs",lhs="[SL]Aburi Kaisen Bara Chirashi"),
control = list (verbose=F))
rules.kaisenkm <- head(sort(rules.kaisenkm, by="confidence"), 20)
plot(rules.kaisenkm, method = "graph")
rules.kaisenkm <- head(sort(rules.kaisenkm, by="confidence"), 10)
plot(rules.kaisenkm, method = "graph")
